
function geconf(t)
-- GENERAL BEGIN
t.data_directory = "data/"                          -- The directory containing the game data (sprites, musics animations ...)
t.config_file  = "ge.conf"                          -- The name of the file to read the engine config from (this is for overide)
t.build_version = "160228"                          -- The version number of the goat engine this config was made for.

t.dev_ctx = false                                   -- Indicates whether or not we are in a development context. 
                                                    -- When disabled (many settings get overidden):
                                                    -- the dev console gets turned off
                                                    -- Scripts automatic reloading is turned off
                                                    -- any debug rendering gets turned off
                                                    -- logger printing to screen gets turnd off
                                                    -- When turned the title bar (on desktop) of the game will display
                                                    -- the current resolution
-- GENERAL END




-- GAME INFO BEGIN
t.game = {}
t.game.version = "1.0.2"                            -- The version number of the game (string)
t.game.name = "Untitled Game"                       -- The window title (string)
t.game.fullscreen = false                           -- Enable fullscreen mode on desktop
t.game.resolution = {width = -1, height = -2}       -- value of -1 means the default
                                                    -- width/height will be used
-- GAME INFO END

-- LOGGER BEGIN
t.logger = {}
t.logger.directory = "LOG/"                         -- The directory under the data directory
t.logger.file_name_format = "%date%.gelog"          -- The levels to include when logging
t.logger.levels = {'INFO','ERROR','FATAL','ASSERT'} -- Levels to log, ommit one to exclude

t.logger.print_screen = false                       -- Wether or not we want to print to screen
-- LOGGER END


-- GAME SCREEN MANAGER BEGIN
t.screens = {}
t.screens.screen_ext = ".ges"                       -- The extension to use for game screen files
t.screens.directory = "screens/"                    -- The directory containing the screens (under data_directory)
t.screens.main_screen = "main.ges"                  -- The name of the main screen (without the extension)
t.screens.level_directory = "levels/"               -- The directory containing the levels (under data_directory)
-- GAME SCREEN MANAGER END


-- SCRIPTING BEGIN
t.scripting = {}
t.scripting.auto_reload = false                     -- Auto reload scripts when their source code changes
t.scripting.directory = "scripts/"                  -- The directory storing the scripts
-- SCRIPTING END

-- LEVEL EDITOR BEGIN
t.level_editor = {}
t.level_editor.enabled = true
-- LEVEL EDITOR END


-- RESOURCES BEGIN
t.resources = {}
t.resources.textures_directory = "sprites/"			-- Directory containing TextureAtlases
t.resources.fonts_directory = "fonts/"				-- Directory containing fonts
-- RESOURCES END





-- UI EGINE BEGIN
t.ui = {}
t.ui.debug = false                                  -- On screen HUD debugs
-- UI EGINE END

-- RENDERING BEGIN
t.rendering = {}
t.rendering.auto_clear = true                       -- Wether or not the engine 
                                                    -- should clear the screen bewteen
                                                    -- each draw call
-- REDERING END


-- CONSOLE BEGIN
t.console = {}
t.console.enabled = false                           -- Enable the console dev console
-- CONSOLE END


-- PREFAB BEGIN
t.prefab = {}
t.prefab.caching = true
-- PREFAB END

-- MODULES BEGIN
t.modules = {}
t.modules.input = {}
t.modules.input.keyboard = true
t.modules.input.gamepad = false
t.modules.input.touch = true
t.modules.audio = true
t.modules.graphics = true
-- MODULES END

end

-- FUNCTIONS

function postconf(t)

    -- Append data directory to all directories
    t.logger.directory        = ensureDataDirectory(t.logger.directory, t)
    t.screens.directory       = ensureDataDirectory(t.screens.directory, t)
    t.screens.level_directory = ensureDataDirectory(t.screens.level_directory, t)
    t.scripting.directory     = ensureDataDirectory(t.scripting.directory, t)


    -- Automatically turn off or onsome properties if dev_ctx is off
    if not t.dev_ctx then
        t.console.enabled = false
        t.scripting.auto_reload = false
        t.logger.print_screen = false
        t.ui.debug = false

        -- When not in ctx force prefab caching
        t.prefab.caching = true
    end


end

-- Makes sure the path is preceded with the data dir
function ensureDataDirectory(directory,t)
    local out
    if not directory.find(directory, t.data_directory) then
        out = t.data_directory .. directory
    end
    return  out
end